---
  - name: Define number of BMH's
    set_fact:
      NUMBER_OF_BMH: "{{ NUM_OF_MASTER_REPLICAS|int +  NUM_OF_WORKER_REPLICAS|int }}"

  - name: Remove temporary Ubuntu crs
    file:
      path: "/tmp/{{ item }}.yaml"
      state: absent
    with_items:
      - controlplane_ubuntu
      - workers_ubuntu
    when: IMAGE_OS == "Ubuntu"

  - name: Remove temporary CentOS crs
    file:
      path: "/tmp/{{ item }}.yaml"
      state: absent
    with_items:
      - controlplane_centos
      - workers_centos
    when: (IMAGE_OS == "Centos") or
          (IMAGE_OS == "")

  - name: Check if cluster deprovisioning started.
    shell: "kubectl get cluster -n {{ NAMESPACE }} -o json | jq -r '.items[] | .status.phase'"
    register: deprovision_cluster
    retries: 2
    delay: 20
    until: (deprovision_cluster.stdout == "deleting") or
           (deprovision_cluster.stdout == "Deleting") or
           (deprovision_cluster.stdout == "")

  - name: Wait until "{{ NUM_NODES }}" bmhs become ready again.
    shell: |
        kubectl get bmh -n {{ NAMESPACE }} -o json | jq -r '[ .items[]
        | select (.status.provisioning.state == "ready")
        | .metadata.name ] | length'
    register: deprovisioned_nodes
    retries: 150
    delay: 3
    until: deprovisioned_nodes.stdout ==  NUM_NODES

  - name: Wait until no metal3machines are remaining
    shell: |
        kubectl get metal3machine -n {{ NAMESPACE }} -o json | jq -r '[ .items[] ] | length'
    register: deprovisioned_m3m
    retries: 150
    delay: 3
    until: deprovisioned_m3m.stdout ==  "0"

  - name: Wait until no machines are remaining
    shell: |
        kubectl get machine -n {{ NAMESPACE }} -o json | jq -r '[ .items[] ] | length'
    register: deprovisioned_machines
    retries: 150
    delay: 3
    until: deprovisioned_machines.stdout ==  "0"

  - name: Wait until no metal3cluster is remaining
    shell: |
        kubectl get metal3cluster -n {{ NAMESPACE }} -o json | jq -r '[ .items[] ] | length'
    register: deprovisioned_metal3cluster
    retries: 150
    delay: 3
    until: deprovisioned_metal3cluster.stdout ==  "0"

  - name: Wait until no cluster is remaining
    shell: |
        kubectl get cluster -n {{ NAMESPACE }} -o json | jq -r '[ .items[] ] | length'
    register: deprovisioned_cluster
    retries: 150
    delay: 3
    until: deprovisioned_cluster.stdout ==  "0"
