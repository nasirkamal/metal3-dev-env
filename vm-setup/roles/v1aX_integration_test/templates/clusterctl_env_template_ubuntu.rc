export IRONIC_HOST_IP='{{ IRONIC_HOST_IP }}'
export DEPLOY_KERNEL_URL='{{ DEPLOY_KERNEL_URL }}'
export DEPLOY_RAMDISK_URL='{{ DEPLOY_RAMDISK_URL }}'
export IRONIC_AUTH_STRATEGY='{{ IRONIC_AUTH_STRATEGY }}'
export IRONIC_URL='{{ IRONIC_URL }}'
export IRONIC_INSPECTOR_URL='{{ IRONIC_INSPECTOR_URL }}'
export POD_CIDR='{{ POD_CIDR }}'
export SERVICE_CIDR='{{ SERVICE_CIDR }}'
export API_ENDPOINT_HOST='{{ CLUSTER_APIENDPOINT_HOST }}'
export API_ENDPOINT_PORT='{{ API_ENDPOINT_PORT }}'
export IMAGE_URL='{{ IMAGE_URL }}'
export IMAGE_CHECKSUM='{{ IMAGE_CHECKSUM }}'
export IMAGE_CHECKSUM_TYPE='md5'
export IMAGE_FORMAT='raw'
export PROVISIONING_POOL_RANGE_START='{{ PROVISIONING_POOL_RANGE_START }}'
export PROVISIONING_POOL_RANGE_END='{{ PROVISIONING_POOL_RANGE_END }}'
export PROVISIONING_CIDR='{{ PROVISIONING_CIDR }}'
export BAREMETALV4_POOL_RANGE_START='{{ BAREMETALV4_POOL_RANGE_START }}'
export BAREMETALV4_POOL_RANGE_END='{{ BAREMETALV4_POOL_RANGE_END }}'
export EXTERNAL_SUBNET_V4_PREFIX='{{ EXTERNAL_SUBNET_V4_PREFIX }}'
export EXTERNAL_SUBNET_V4_HOST='{{ EXTERNAL_SUBNET_V4_HOST }}'
export BAREMETALV6_POOL_RANGE_START='{{ BAREMETALV6_POOL_RANGE_START }}'
export BAREMETALV6_POOL_RANGE_END='{{ BAREMETALV6_POOL_RANGE_END }}'
export EXTERNAL_SUBNET_V6_PREFIX='{{ EXTERNAL_SUBNET_V6_PREFIX }}'
export EXTERNAL_SUBNET_V6_HOST='{{ EXTERNAL_SUBNET_V6_HOST }}'
export CTLPLANE_KUBEADM_EXTRA_CONFIG="
    users:
    - name: {{ IMAGE_USERNAME }}
      sudo: \"ALL=(ALL) NOPASSWD:ALL\"
      sshAuthorizedKeys:
      - {{ SSH_PUB_KEY_CONTENT }}
    preKubeadmCommands:
{% if CAPM3_VERSION == "v1alpha3" %}
      - ip link set dev enp2s0 up
      - dhclient enp2s0
{% endif %}
      - apt update -y
      - apt-get install -y conntrack socat
      - netplan apply
      - >-
        apt install net-tools gcc linux-headers-$(uname -r) bridge-utils
        apt-transport-https ca-certificates curl gnupg-agent
        software-properties-common -y
      - apt install -y keepalived && systemctl stop keepalived
      - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
      - add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"
      - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
      - echo 'deb https://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
      - apt update -y
      - apt install docker-ce docker-ce-cli containerd.io -y
      - echo  \"Installing kubernetes binaries\"
      - curl -L --remote-name-all https://storage.googleapis.com/kubernetes-release/release/{{ KUBERNETES_BINARIES_VERSION }}/bin/linux/amd64/{kubeadm,kubelet,kubectl}
      - chmod a+x kubeadm kubelet kubectl
      - mv kubeadm kubelet kubectl /usr/local/bin/
      - mkdir -p /etc/systemd/system/kubelet.service.d
      - curl -sSL \"https://raw.githubusercontent.com/kubernetes/release/{{ KUBERNETES_BINARIES_CONFIG_VERSION }}/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service\" | sed \"s:/usr/bin:/usr/local/bin:g\" > /etc/systemd/system/kubelet.service
      - curl -sSL \"https://raw.githubusercontent.com/kubernetes/release/{{ KUBERNETES_BINARIES_CONFIG_VERSION }}/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf\" | sed \"s:/usr/bin:/usr/local/bin:g\" > /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      - systemctl enable --now docker kubelet
      - if (curl -sk --max-time 10 https://{{ CLUSTER_APIENDPOINT_HOST }}:6443/healthz); then echo \"keepalived already running\";else systemctl start keepalived; fi
      - usermod -aG docker {{ IMAGE_USERNAME }}
      - systemctl link /etc/systemd/system/multi-user.target.wants/monitor.keepalived.service
      - systemctl enable monitor.keepalived.service
      - systemctl start monitor.keepalived.service
    postKubeadmCommands:
      - mkdir -p /home/{{ IMAGE_USERNAME }}/.kube
      - cp /etc/kubernetes/admin.conf /home/{{ IMAGE_USERNAME }}/.kube/config
      - systemctl enable --now keepalived
      - chown {{ IMAGE_USERNAME }}:{{ IMAGE_USERNAME }} /home/{{ IMAGE_USERNAME }}/.kube/config
    files:
      - path: /usr/local/bin/monitor.keepalived.sh
        owner: root:root
        permissions: '0755'
        content: |
            #!/bin/bash
            while :; do
              curl -sk https://127.0.0.1:6443/healthz 1>&2 > /dev/null
              isOk=\$?
              isActive=\$(systemctl show -p ActiveState keepalived.service | cut -d'=' -f2)
              if [ \$isOk == \"0\" ] &&  [ \$isActive != \"active\" ]; then
                logger 'API server is healthy, however keepalived is not running, starting keepalived'
                echo 'API server is healthy, however keepalived is not running, starting keepalived'
                sudo systemctl start keepalived.service
              elif [ \$isOk != \"0\" ] &&  [ \$isActive == \"active\" ]; then
                logger 'API server is not healthy, however keepalived running, stopping keepalived'
                echo 'API server is not healthy, however keepalived running, stopping keepalived'
                sudo systemctl stop keepalived.service
              fi
              sleep 5
            done
      - path: /etc/systemd/system/multi-user.target.wants/monitor.keepalived.service
        owner: root:root
        content: |
            [Unit]
            Description=Monitors keepalived adjusts status with that of API server
            After=syslog.target network-online.target

            [Service]
            Type=simple
            Restart=always
            ExecStart=/usr/local/bin/monitor.keepalived.sh

            [Install]
            WantedBy=multi-user.target
      - path: /etc/keepalived/keepalived.conf
        content: |
          ! Configuration File for keepalived
          global_defs {
              notification_email {
              sysadmin@example.com
              support@example.com
              }
              notification_email_from lb@example.com
              smtp_server localhost
              smtp_connect_timeout 30
          }
          vrrp_instance VI_2 {
              state MASTER
              interface enp2s0
              virtual_router_id 2
              priority 101
              advert_int 1
              virtual_ipaddress {
                  {{ CLUSTER_APIENDPOINT_HOST }}
              }
          }
{% if CAPM3_VERSION == "v1alpha3" %}
      - path: /etc/netplan/51-cloud-config.yaml
        owner: root:root
        permissions: '0644'
        content: |
          network:
              ethernets:
                  enp2s0:
                      dhcp4: true
                  enp1s0:
                      dhcp4: false
              version: 2
{% endif %}
      - path : /etc/netplan/52-ironicendpoint.yaml
        owner: root:root
        permissions: '0644'
        content: |
          network:
            version: 2
            renderer: networkd
            bridges:
              {{ IRONIC_ENDPOINT_BRIDGE }}:
                interfaces: [enp1s0]
{% if CAPM3_VERSION == "v1alpha3" %}
                dhcp4: true
{% else %}
                addresses:
                - {{ "{{ ds.meta_data.provisioningIP }}" }}/{{ "{{ ds.meta_data.provisioningCIDR }}" }}
{% endif %}
      - path : /etc/docker/daemon.json
        owner: root:root
        permissions: '0644'
        content: |
          {
            \"insecure-registries\" : [\"192.168.111.1:5000\"]
          }
"
export WORKERS_KUBEADM_EXTRA_CONFIG="
      users:
      - name: {{ IMAGE_USERNAME }}
        sudo: \"ALL=(ALL) NOPASSWD:ALL\"
        sshAuthorizedKeys:
        - {{ SSH_PUB_KEY_CONTENT }}
      preKubeadmCommands:
{% if CAPM3_VERSION == "v1alpha3" %}
        - ip link set dev enp2s0 up
        - dhclient enp2s0
{% endif %}
        - apt update -y
        - netplan apply
        - >-
          apt install apt-transport-https ca-certificates
          curl gnupg-agent software-properties-common -y
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
        - add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"
        - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
        - echo 'deb https://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
        - apt update -y
        - apt-get install -y conntrack socat
        - apt install docker-ce docker-ce-cli containerd.io -y
        - echo  \"Installing kubernetes binaries\"
        - curl -L --remote-name-all https://storage.googleapis.com/kubernetes-release/release/{{KUBERNETES_BINARIES_VERSION}}/bin/linux/amd64/{kubeadm,kubelet,kubectl}
        - chmod a+x kubeadm kubelet kubectl
        - mv kubeadm kubelet kubectl /usr/local/bin/
        - mkdir -p /etc/systemd/system/kubelet.service.d
        - curl -sSL \"https://raw.githubusercontent.com/kubernetes/release/{{KUBERNETES_BINARIES_CONFIG_VERSION}}/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service\" | sed \"s:/usr/bin:/usr/local/bin:g\" > /etc/systemd/system/kubelet.service
        - curl -sSL \"https://raw.githubusercontent.com/kubernetes/release/{{KUBERNETES_BINARIES_CONFIG_VERSION}}/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf\" | sed \"s:/usr/bin:/usr/local/bin:g\" > /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        - systemctl enable --now docker kubelet
        - usermod -aG docker {{ IMAGE_USERNAME }}
      files:
{% if CAPM3_VERSION == "v1alpha3" %}
        - path: /etc/netplan/51-cloud-config.yaml
          owner: root:root
          permissions: '0644'
          content: |
            network:
                ethernets:
                    enp2s0:
                        dhcp4: true
                    enp1s0:
                        dhcp4: false
                version: 2
{% endif %}
        - path : /etc/netplan/52-ironicendpoint.yaml
          owner: root:root
          permissions: '0644'
          content: |
            network:
              version: 2
              renderer: networkd
              bridges:
                {{ IRONIC_ENDPOINT_BRIDGE }}:
                  interfaces: [enp1s0]
{% if CAPM3_VERSION == "v1alpha3" %}
                  dhcp4: true
{% else %}
                  addresses:
                  - {{ "{{ ds.meta_data.provisioningIP }}" }}/{{ "{{ ds.meta_data.provisioningCIDR }}" }}
{% endif %}
        - path : /etc/docker/daemon.json
          owner: root:root
          permissions: '0644'
          content: |
            {
              \"insecure-registries\" : [\"192.168.111.1:5000\"]
            }
"
